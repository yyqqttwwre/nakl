from pyrogram import Client
from pyrogram.raw import functions, types
import sys, time
import asyncio
import json
import configparser
from pyrogram.errors import FloodWait, UserPrivacyRestricted, UserRestricted, PeerFlood, UserNotMutualContact, UserChannelsTooMuch
from database import *
from pyrogram.raw.functions.messages import AddChatUser
from pyrogram.raw.types import InputUser

opreat      = sys.argv[1];
opreats    = ['addusers','join','left','check','send','getusers','adduser','getUsers','joining','CX','MovePro','View','AddUser'];


if opreat not in opreats:
	exit();

ses    = sys.argv[2].split('.')[0];



config = configparser.ConfigParser()
config.read("jello.ini")

api_id       = config['owner']['id'];
api_hash = config['owner']['hash'];

async def Controll():
	try:
		app	  = Client(f"sessions/{ses}",api_id=api_id, api_hash=api_hash);		connect  = await app.connect();

		if opreat == 'check':
			try:
				await app.get_me();
				print('true');
			except:
				print('false');

		await app.get_me();
	except Exception as Errors:
		RESPONSE      = str(Errors).replace('Telegram says: ', '').split(' - ')[0];

		if RESPONSE in ['[401 AUTH_KEY_UNREGISTERED]', '[401 USER_DEACTIVATED]', '[401 USER_DEACTIVATED_BAN]', '[401 SESSION_REVOKED]']:
			try:
				print('deleted');
				os.remove(f"sessions/{ses}.session");
			except:
				pass
		if opreat == 'check':
			print(RESPONSE);
		print('false',Errors);
		connect   = False;
		#print(ses);
		return
	if not connect:
		print('NO_CONNECTED');
		return

	try:
		await app.invoke(functions.account.UpdateStatus(
			offline=False
		));
	except:
		pass

	if opreat == 'CX':
		
		UNChat     = "phpmm"
		IDsUsers    = [];
		ListUsers   = [];
		
		async for message in app.get_chat_history(UNChat):
			if message.from_user.username is not None:
				print(message.from_user.u
